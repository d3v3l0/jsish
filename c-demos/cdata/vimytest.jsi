#!/usr/local/bin/jsish --I unitTest=1 %s
"use strict";
require('Vimy');
require('VarTest');
var vars = [], fidx, n, m, x, v;
;'\n====Simple====';
for (var i of Info.named('CData'))
   vars.push(i.conf('name')+i.conf('varParam'));

;vars.sort();
;foo.info();
;foo.get(null, 'fld1');
;foo.set(null, {fld1:3});
;n=foo.get(null);
;'0x'+n.sig.toString(16);
;bar.set(null, {foo:{bit2: 99}, bfld1:1});

;'\nArray sub-field';
;n=bar.get(null);
;'0x'+n.sig.toString(16);
;'0x'+n.foo.sig.toString(16);
;x = new Array(9), bn;
x[1] = 8;
;bar.set(null, {barr:x});
;bar.get(null, 'barr');
;bar.get(null, 'barr[1]');
;bar.set(null, 'barr[2]', 9);
;bar.incr(null, 'barr[2]', 2);
;bar.get(null, 'barr');

;'\nStruct sub-field';
;bar.get(null, 'foo.fld1');
;bar.set(null, 'foo.fld1', 3);
;bar.get(null, 'foo.fld1');
;bar.get(null, 'bfoo');
;bn=bar.get(null, 'bfoo[0].fld1');
;bar.set(null, 'bfoo[0].fld1', bn+1);
;bar.incr(null, 'bfoo[0].fld1', 1);
;bn=bar.get(null, 'bfoo[0]');
;bn.fld1++;
;bar.set(null, 'bfoo[0]', bn);
;bar.get(null, 'bfoo[0]');

;fig.get(null);

;'\n====CARRAY====';
debugger;
;foos.get(0);
;foos.set(0, {bit2:99});
;foos.get(0, 'bit2');

;barss.get(1, 'foo.bit2');
;barss.set(1, 'foo.bit2', 3);
;barss.get(1, 'foo.bit2');

;'\n====MAPS====';
;'\nSTRING KEY: bars{}';
;bars.conf();
;bars.set('1', {bfld1:2});
;bars.get('1', 'bfld1');
;bars.set('2', {bfld1:3});
;bars.names();
;'\nNUMBER KEY: BN{0}';
;BN.conf();
;BN.set(1, {bfld1:2});
;BN.get(1, 'bfld1');
;BN.set(2, {bfld1:3});
;BN.names();

;'\nSTRUCT KEY: Bs{@Fidx}';
;fidx = {key1:2, key2:1};
;Bs.set(fidx, {bbit:4});
;Bs.get(fidx,'bbit');

;'\n====HASHES====';

;'\nSTRING KEY: Bs2{#}';
;Bs2.conf();
;Bs2.set('Able', {});
;Bs2.get('Able');

;'\nNUMBER KEY: BN2{#}';
;BN2.conf();
;BN2.set(1, {});
;BN2.get(1);

;'\nMisc';
;CEnum.names();
;CStruct.names();

;'\nExtension';
;n=Vimy.keys();
for (i of n) {
   m=Info.cmds('Vimy.'+i);
   puts('  '+m.name+'('+m.args+')');
}
;Vimy.conf();
;Vimy.add(1,2);
;Vimy.addall(3);
;Vimy.addall(3,4,5,6);
;Vimy.storm();
;Vimy.storm('Ridge');
;Vimy.storm('Castle', 4);

;'\nError checking';
try {
;Vimy.add(1);
} catch(e) { puts(e); }
try {
;Vimy.add('a',2);
} catch(e) { puts(e); }
try {
;Vimy.add(1,2,3);
} catch(e) { puts(e); }
try {
;Vimy.addall();
} catch(e) { puts(e); }
try {
;Vimy.storm('a',1,2);
} catch(e) { puts(e); }
try {
;Vimy.foo(1);
} catch(e) { puts(e); }
/*
=!EXPECTSTART!=
'
====Simple===='
vars.sort() ==> [ "BN2{#0}", "BN{0}", "Bs2a{#@Fidx}", "Bs2{#}", "Bs{@Fidx}", "Vimy_Data", "bar", "barss[10]", "bars{}", "fig", "foo", "foos2[FooSize]", "foos[10]" ]
foo.info() ==> { label:"Struct Foo.", spec:[ { cName:"uint32_t", flags:524288, help:"", initOnly:false, name:"sig", noCase:false, readOnly:false, required:false, size:4, type:"UINT32" }, { cName:"int", help:"An int field with default value of 2", initOnly:false, name:"fld1", noCase:false, readOnly:false, required:false, size:4, type:"INT" }, { cName:"double", help:"A float", initOnly:false, name:"val1", noCase:false, readOnly:false, required:false, size:8, type:"DOUBLE" }, { cName:"", customArg:{ help:"Array of OPT types", name:"array" }, customArgHelp:"My Foo struct.  TODO: Parameters for defn.", help:"", initOnly:false, name:"arr", noCase:false, readOnly:false, required:false, size:36, type:"CUSTOM" }, { cName:"", customArg:{ name:"bitfield" }, customArgHelp:"My Foo struct.  TODO: Parameters for defn.", flags:65536, help:"", initOnly:false, name:"bit", noCase:false, readOnly:false, required:false, size:0, type:"CUSTOM" }, { cName:"", customArg:{ name:"bitfield" }, customArgHelp:"My Foo struct.  TODO: Parameters for defn.", flags:65536, help:"", initOnly:false, name:"bit2", noCase:false, readOnly:false, required:false, size:0, type:"CUSTOM" }, { cName:"int", help:"", initOnly:false, name:"sint", noCase:false, readOnly:false, required:false, size:4, type:"INT" }, { cName:"", customArg:{ enumList:[ "Home", "Away" ], help:"one value from list", name:"enum" }, customArgHelp:"My Foo struct.  TODO: Parameters for defn.", data:[ "Home", "Away" ], flags:16777216, help:"", initOnly:false, name:"place1", noCase:false, readOnly:false, required:false, size:4, type:"CUSTOM" }, { cName:"", customArg:{ name:"bitfield" }, customArgHelp:"My Foo struct.  TODO: Parameters for defn.", flags:16842752, help:"", initOnly:false, name:"plac", noCase:false, readOnly:false, required:false, size:0, type:"CUSTOM" }, { cName:"Jsi_Strbuf", help:"", initOnly:false, name:"str8", noCase:false, readOnly:false, required:false, size:9, type:"STRBUF" } ], struct:"Foo" }
foo.get(null, 'fld1') ==> 2
foo.set(null, {fld1:3}) ==> undefined
n=foo.get(null) ==> { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:3, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }
'0x'+n.sig.toString(16) ==> 0x115ba1dd
bar.set(null, {foo:{bit2: 99}, bfld1:1}) ==> undefined
'
Array sub-field'
n=bar.get(null) ==> { barr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bbit:0, bfld1:1, bfoo:[ { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 } ], bval1:0, foo:{ arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:99, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, sig:1756855419 }
'0x'+n.sig.toString(16) ==> 0x68b77c7b
'0x'+n.foo.sig.toString(16) ==> 0x115ba1dd
x = new Array(9), bn ==> [ undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined ] undefined
bar.set(null, {barr:x}) ==> undefined
bar.get(null, 'barr') ==> [ 0, 8, 0, 0, 0, 0, 0, 0, 0 ]
bar.get(null, 'barr[1]') ==> 8
bar.set(null, 'barr[2]', 9) ==> undefined
bar.incr(null, 'barr[2]', 2) ==> 11
bar.get(null, 'barr') ==> [ 0, 8, 11, 0, 0, 0, 0, 0, 0 ]
'
Struct sub-field'
bar.get(null, 'foo.fld1') ==> 2
bar.set(null, 'foo.fld1', 3) ==> undefined
bar.get(null, 'foo.fld1') ==> 3
bar.get(null, 'bfoo') ==> [ { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 } ]
bn=bar.get(null, 'bfoo[0].fld1') ==> 2
bar.set(null, 'bfoo[0].fld1', bn+1) ==> undefined
bar.incr(null, 'bfoo[0].fld1', 1) ==> 4
bn=bar.get(null, 'bfoo[0]') ==> { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:4, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }
bn.fld1++ ==> 4
bar.set(null, 'bfoo[0]', bn) ==> undefined
bar.get(null, 'bfoo[0]') ==> { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:5, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }
fig.get(null) ==> { bar:{ barr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bbit:0, bfld1:0, bfoo:[ { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 } ], bval1:0, foo:{ arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, sig:1756855419 }, bvals:[], i:0, sig:1344398482 }
'
====CARRAY===='
foos.get(0) ==> { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }
foos.set(0, {bit2:99}) ==> undefined
foos.get(0, 'bit2') ==> 99
barss.get(1, 'foo.bit2') ==> 0
barss.set(1, 'foo.bit2', 3) ==> undefined
barss.get(1, 'foo.bit2') ==> 3
'
====MAPS===='
'
STRING KEY: bars{}'
bars.conf() ==> { arrSize:0, flags:0, help:"Map-Tree with string-key.", keyName:null, keyType:"string", mapType:"tree", maxSize:0, name:"bars", noAuto:false, structName:"Bar", user:0, varParam:"{}" }
bars.set('1', {bfld1:2}) ==> undefined
bars.get('1', 'bfld1') ==> 2
bars.set('2', {bfld1:3}) ==> undefined
bars.names() ==> [ "1", "2" ]
'
NUMBER KEY: BN{0}'
BN.conf() ==> { arrSize:0, flags:0, help:"Map-Tree with number-key.", keyName:null, keyType:"number", mapType:"tree", maxSize:0, name:"BN", noAuto:false, structName:"Bar", user:0, varParam:"{0}" }
BN.set(1, {bfld1:2}) ==> undefined
BN.get(1, 'bfld1') ==> 2
BN.set(2, {bfld1:3}) ==> undefined
BN.names() ==> [ 1, 2 ]
'
STRUCT KEY: Bs{@Fidx}'
fidx = {key1:2, key2:1} ==> { key1:2, key2:1 }
Bs.set(fidx, {bbit:4}) ==> undefined
Bs.get(fidx,'bbit') ==> 4
'
====HASHES===='
'
STRING KEY: Bs2{#}'
Bs2.conf() ==> { arrSize:0, flags:0, help:"Map-Hash with string-key", keyName:null, keyType:"string", mapType:"hash", maxSize:0, name:"Bs2", noAuto:false, structName:"Bar", user:0, varParam:"{#}" }
Bs2.set('Able', {}) ==> undefined
Bs2.get('Able') ==> { barr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bbit:0, bfld1:0, bfoo:[ { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 } ], bval1:0, foo:{ arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, sig:1756855419 }
'
NUMBER KEY: BN2{#}'
BN2.conf() ==> { arrSize:0, flags:0, help:"Map-Hash with number key.", keyName:null, keyType:"number", mapType:"hash", maxSize:0, name:"BN2", noAuto:false, structName:"Bar", user:0, varParam:"{#0}" }
BN2.set(1, {}) ==> undefined
BN2.get(1) ==> { barr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bbit:0, bfld1:0, bfoo:[ { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, { arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 } ], bval1:0, foo:{ arr:[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], bit:0, bit2:0, fld1:2, plac:"Home", place1:"Home", sig:291217885, sint:0, str8:"/mnt/ab ", val1:0 }, sig:1756855419 }
'
Misc'
CEnum.names() ==> [ "MyDefs", "Places", "Bitvals" ]
CStruct.names() ==> [ "Fidx", "Foo", "Bar", "Vimy", "Fig" ]
'
Extension'
n=Vimy.keys() ==> [ "conf", "add", "addall", "storm" ]
  Vimy.conf(options:string|object=void)
  Vimy.add(n1:number, n2:number)
  Vimy.addall(n1:number, n2:number=2, ...)
  Vimy.storm(ridge:string='Arras', times:number=2)
Vimy.conf() ==> { cnt:0, max:10, sum:0 }
Vimy.add(1,2) ==> 3
Vimy.addall(3) ==> 5
Vimy.addall(3,4,5,6) ==> 7
Vimy.storm() ==> Stormed Arras * 2
Vimy.storm('Ridge') ==> Stormed Ridge * 2
Vimy.storm('Castle', 4) ==> Stormed Castle * 4
'
Error checking'
Vimy.add(1) ==> got 1 args, expected 2, calling function add(n1:number, n2:number)
Vimy.add('a',2) ==> type mismatch for argument arg 1 'n1': expected "number" but got "string", in call to 'add' declared at vimytest.jsi:0.0 <a>.
Vimy.add(1,2,3) ==> got 3 args, expected 2, calling function add(n1:number, n2:number)
Vimy.addall() ==> got 0 args, expected 1 or more, calling function addall(n1:number, n2:number=2, ...)
Vimy.storm('a',1,2) ==> got 3 args, expected 0-2, calling function storm(ridge:string='Arras', times:number=2)
Vimy.foo(1) ==> 'foo' sub-commands are: add addall conf storm.
=!EXPECTEND!=
*/
