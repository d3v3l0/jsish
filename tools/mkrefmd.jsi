#!/usr/bin/env jsish

function jsi_mkrefmd(files:array|string=null, conf:object=undefined) {

    var options = { // Generate documentation for Jsi builtin cmd.
        md       :false         // Generate for markdown
    };
    var self = {
    };
    parseOpts(self, options, conf);
    
    var optsDumped = [];
   
    function DumpOpts(opts:array, hlp:string, nam:string, nam2:string=void) {
        var rv = '';//, opts = Info.cmds(cnam).options;
        rv += '### Options "'+nam+'"\n';
        rv += "|Option|Type|Description|Flags|\n";
        rv += "|---|---|---|---|\n";
        //puts(opts);
        var srv = '', cnt = 0;
        for (var o in opts) {
            var ci = opts[o];
            if (isconf && ci.initOnly) continue;
            cnt++;
            var help = (ci.help?ci.help+'.':'');
            var flags = '';
            if (ci.readOnly)
                flags += 'readOnly';
            if (ci.initOnly)
                flags += (flags===''?'':'|')+'initOnly';
            if (ci.required)
                flags += (flags===''?'':'|')+'required';
            if (ci.noCase)
                flags += (flags===''?'':'|')+'noCase';
            var type = ci.type;
            if (ci.customArg) {
                if (ci.customArg.subSpec) {
                    var nsrv = DumpOpts(ci.customArg.subSpec, ci.customArgHelp, ci.name);
                    if (nsrv !== '') {
                        type="options";
                        srv += nsrv;
                    }
                }
                else if (ci.customArg.enumList) {
                    help += " (one of: **"+ci.customArg.enumList.join("**, **")+"**)";
                    type="STRKEY";
                }
                else if (ci.customArg.bitSet) {
                    help += " (zero or more of: **"+ci.customArg.bitSet.join("**, **")+"**)";
                    type="ARRAY";
                }
            }
            if (ci.args !== undefined && ci.type === 'FUNC')
                help += " @function("+ci.args+")";
            rv += "|"+ci.name+"|*"+type+"*|"+ help +"|"+flags+"|\n";
        }
        if (!cnt) return '';
        if (srv !== '') {
            if (optsDumped.indexOf(srv)>=0)
                srv = '';
            optsDumped.push(srv);
        }
        return rv + srv;
    }

    function DumpCmd(cinf:object) {
        var rv = '', ret = '';
        if (cinf.retType != "any")
            ret = ':'+cinf.retType;
        var cnam = format("%s(%s)%s", cinf.name, cinf.args, ret);
        rv += '\n---\n';
        rv += '\n\n## '+cinf.name+'\n\n';
        var casb = cinf.args; //.replace('|','&verbar;');
        rv += format("- `function %s(%s)%s`\n\n", cinf.name, casb, ret.trim());
        if (cinf.help)
            rv += cinf.help+".\n\n";
        if (cinf.info)
            rv += cinf.info+'\n\n';
        if (cinf.options) {
            rv += DumpOpts(cinf.options, cinf.optHelp, cinf.name);
        }
       return rv+'\n';
    }
    function LinkOpts(astr:string, name:string) {
        var ii;
        if ((ii=astr.indexOf('options'))<0)
            return astr;
        var ss = '';
        if (ii>0)
            ss += astr.slice(0, ii);
        ss += "options";
        ss += astr.slice(ii+7);
        return ss;
    }

    function DumpObj(tinf:object) {
        var hasconf, ro = '', rv = '', ci, cnam = tinf.name, subs=[], ret = '', cmds;
        var re1 = new RegExp('^'+cnam+'.[_a-zA-Z0-9]+$');
        cmds = Info.cmds(re1,{constructor:true,full:true});
        rv += '\n\n## '+cnam+'\n\n';
        rv += '- `';
        if (tinf.constructor) {
            if (tinf.retType != "any")
                ret = ':'+tinf.retType;
            var casb = tinf.args; //.replace('|','&verbar;');
            rv += 'new '+cnam+"("+casb+")"+ret;
        } else {
            rv += cnam+".method(...)";
        }
        rv += "`\n\n";
        if (tinf.help)
            rv += tinf.help+".\n\n";
        if (tinf.info)
            rv += tinf.info+'\n\n';
        rv += "\n### Methods\n";
        rv += '|Method|Function Prototype|Description|\n';
        rv += '|---|---|---|\n';
        var clnknam = null;
        if (tinf.constructor) {
            ci = Info.cmds(cnam+'.'+cnam,{constructor:true});
            var conhelp = (ci.help?ci.help+'.':''), aastr, tret = '';
            if (ci.retType != "any")
                tret = ':'+ci.retType;
            if (ci.info) conhelp += ci.info;
            aastr = tinf.args;
            if (tinf.options)
                aastr = LinkOpts(aastr, "new "+cnam);
            rv += "|"+cnam+"|`new "+cnam+"("+aastr+")"+tret+"` |"+conhelp.map(['\n',' '])+'|\n';
        }
        if (cmds !== undefined) {
            for (var cmd of cmds) {
                var namspl = cmd.split('.'), nam = namspl[namspl.length-1];
                tret = '';
                if (nam == cnam)
                    continue;
                ci = Info.cmds(cnam+'.'+nam);
                if (ci.retType !== "any")
                    tret = ':'+ci.retType;
                conhelp = (ci.help?ci.help+'.':'');
                if (ci.info) conhelp += ' '+ci.info;
                if (ci.options) {
                    if (!clnknam) clnknam=nam;
                    if (!tinf.constructor || nam !== 'conf')
                        ro += DumpOpts(ci.options, ci.optHelp, nam, cnam+'.conf');
                    aastr = LinkOpts(ci.args, cnam+'.'+nam);
                } else {
                    aastr = ci.args;
                }
                //if (nam == 'conf') hasconf = ci.options;
               // if (!aastr) aastr='';
                rv += "|"+nam+"|`function("+aastr+")"+tret+"` |"+conhelp.map(['\n',' '])+'|\n';
                if (ci.flags && ci.flags&8)
                    subs.push(ci);
            }
        }
        if (tinf.options && nam !== 'conf')
            rv += DumpOpts(tinf.options, tinf.optHelp, 'new', cnam+'.'+'conf');
        rv += ro;
        for (ci of subs)
            rv += DumpObj(ci);
        return rv;
    }
    
    
    //*************** BEGIN MAIN **************
    var extlst = ['Sqlite', 'WebSocket', 'MySql', 'Socket'];
    for (var i in extlst) {
        try { require(extlst[i]); } catch(e) { }
    }
    var rv = '', tinf, lst = Info.cmds();
    var vv = Info.version(true);
    var ver = vv.major+'.'+vv.minor+'.'+vv.release;

    puts("# Reference\nJsi builtin commands *(generated)*.\n");

    for (i in lst) {
        tinf = Info.cmds(lst[i]);
        switch (tinf.type) {
        case 'object':
            rv += DumpObj(tinf);
            break;
        case 'command':
            //rv += DumpCmd(tinf);
            break;
        default:
            throw("bad id");
            continue;
        }
    }
    return rv;
}

if (Info.isMain()) {
    runModule(jsi_mkrefmd);
}
