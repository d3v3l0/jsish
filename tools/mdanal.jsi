#!/usr/bin/env jsish

function mdanal(args:string|array, opts) {

    var options = { // Analyse markdown
    };
    var self = {
        fdata:{},
        flabels:{},
        flinks:{},
        fblocks:{},
        aflist:[],
    };
    moduleOpts(options);

    function dputs(...) {}
    
    function slugify(s) {
        s = s.toLowerCase().trim();
        s = s.replace(/`~!@#$%^&*()_\-+=\[\]\{\};:'"\\|\/,.<>?\s]/g, ' ');
        s = s.map(['\"', '', '    ', ' ', '   ', ' ', '  ', ' ', ' ', '-']);
        //if (s.indexOf('opt')>=0) puts('S',s);
        return s;
    }
    
    function analOne(fn:string) {
        var tr, j, r, t, d, f, i, th;
        var lst = [fn];
        if (File.isdir(fn)) {
            if (fn[fn.length-1]!='/') fn+='/';
            lst = File.glob('*.md', {dir:fn, prefix:fn, tails:true});
        }
        dputs('LST', lst);
        var re = /^#+ [^#]+$/gm,
            //re2 = /\[[^\]\n]+\]\([^\)\n]+\)/gm,
            rel = /\[[^]]+\]\([^)]+\)/gm, 
            reb = /```.*```/g;
        var aflist = [];
        for (i of lst) {
            f = File.tail(i);
            aflist.push(f);
        }
        for (i of lst) {
            f = File.tail(i);
            dputs("DO HEADERS", i);
            d = self.fdata[f] = File.read(i);
            r = d.match(re);
            t = [];
            if (r) {
                for (j of r) {
                    tr = j.match(/ [^#]+/);
                    if (tr)
                        t.push(slugify(tr[0].trim()));
                }
            }
            dputs('R', t);
            self.flabels[f] = t;
            //if (f == 'Reference.md') continue;
            r = d.match(rel);
            dputs('DO LINKS', r);
            t = [];
            if (r) {
                for (j of r) {
                    tr = j.match(/\(.*\)+/);
                    if (tr) {
                        var ta;
                        tr = tr[0];
                        tr = tr.substr(1,tr.length-2).split('"')[0];
                        if (tr[0] == '#') {
                            var tr0a = slugify(tr.substr(1));
                            if (self.flabels[f].indexOf(tr0a)<0)
                                puts("IN", f, "LOCAL-LINK TO UNKNOWN SECTION:", tr);
                            continue;
                            //ta = f+tr;
                        } else {
                            if (tr.indexOf('://')>0) continue;
                            th = tr.trim().split('#');
                            var t0 = th[0].trim();
                            if (aflist.indexOf(t0)<0) {
                                puts('IN',f,'FILE NOT FOUND:"'+t0+'" FROM "'+tr+'"');
                                continue;
                            }
                            if (th.length!=2)
                                //ta = th[0];
                                continue;
                            else
                                ta = th[0] + '#' + th[1];
                        }
                        t.push(ta.trim());
                    }
                }
            }
            self.flinks[f] = t;
            dputs('L', t);
            r = d.match(reb);
            dputs('DO BLOCKS', r);
            self.fblocks[f] = r;
        }
        for (f in self.flinks) {
            var fl = self.flinks[f];
            if (!fl) {log('no links',f); continue; }
            dputs(f,'fl',fl);
            for (tr of fl) {
                th = tr.trim().split('#');
                if (th.length!=2) {
                    //ta = th[0];
                    continue;
                } else {
                    var x0 = th[0].trim();
                    ta = x0 + '#' + th[1];
                    var xx = self.flabels[x0];
                    if (!xx || xx.indexOf(th[1].toLowerCase())<0)
                        puts("IN", f, "NONLOCAL-LINK TO UNKNOWN SECTION:", tr);
                }
            }
        }
            
    }

    if (typeof(args) !== 'array')
        args = [args];
    for (var i of args)
        analOne(i);
        

}

moduleRun(mdanal);

