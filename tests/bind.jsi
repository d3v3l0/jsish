#!/usr/local/bin/jsish -u %s

var x = 9; 
var mod = {
  x: 81,
    getX: function() { return this.x; }
};

;mod.getX();

var getX = mod.getX;
;getX();
// 9, because in this case, "this" refers to the global object

// create a new function with 'this' bound to mod
var boundGetX = getX.bind(mod);
;boundGetX();


// Example showing binding some parameters
var sum = function(a, b) {
  return a + b;
};

var add5 = sum.bind(null, 5);
;add5(10);
;add5(10);
;sum(5,10);
add5 = sum.bind(null, 6);
;add5(10);
add5 = sum.bind(null);
;add5(10,12);
add5 = sum.bind();
;add5(10,11);
var nn = noOp.bind(null,99);
nn(10);
var pp = puts.bind(null,'XX');
;pp('HI');

function h(a) { return {a: a, th: this}; }
var i;
;i= h.bind({str: "foo"}, 2);
;i.call({x: 1});

/*
=!EXPECTSTART!=
mod.getX() ==> 81
getX() ==> 9
boundGetX() ==> 81
add5(10) ==> 15
add5(10) ==> 15
sum(5,10) ==> 15
add5(10) ==> 16
add5(10,12) ==> 22
add5(10,11) ==> 21
pp('HI') ==> XX HI
undefined
i= h.bind({str: "foo"}, 2) ==> "function () { [native code] }"
i.call({x: 1}) ==> { a:2, th:{ str:"foo" } }
=!EXPECTEND!=
*/
