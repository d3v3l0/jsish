#! /usr/bin/env jsish

require('Jsi', '2.4');

function Module(args:array, conf:object=void) {

    const options = { // Run or create a Jsi module.
        create  :'',        // Create a Jsi module template with this name.
        es5lint :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.
        force   :false,     // Remove output if exists.
        json    :'',        // Json file to normalize
        output  :'',        // Override the output filename default of create + .jsi.
        quiet   :false,     // No messages.
        setup   :'',        // Download and setup fossil repos from jsish.org.
        web     :false      // Use websock server template.
    };
    var self = {
        rootdir      :'',   // Root directory.
        Trace       :false,
    };

    moduleOpts(options, self);
    
    function setupApp(app) {
        if (app !== 'pdq') LogWarn('app is not pdq');
        //Wget('http://jsish.org/fossil/pdq/zip/pdq', {O:'pdq.zip'});
        //Wget('http://jsish.org/bin/fossil', {O:'fossil'}); exec('chmod u+x fossil');;
        exec('fossil clone http://jsish.org/fossil/'+app+' '+app+'.fossil');
        File.write('run_'+app+'.sh', "#!\njsish -a -update true "+app+'.fossil $*\n');
    }
    
    function jsonify(name) {
        var d = File.read(name);
        d = JSON.parse(d, false);
        d = JSON.stringify(d, null, 4);
        if (self.output == '-')
            puts(d);
        else if (self.output == '.')
            File.write(name, d);
        else if (self.output)
            File.write(self.output, d);
        else
            return d;
    }
    
    function es5lint(d) {
        var i, lst;
        if (File.isdir(d))
            lst = File.glob('*.js', {dir:d, recurse:true});
        else
            lst = [d];
        for (i of lst) {
            var int = new Interp({noEval:true, noES6:true, scriptFile:i});
            delete int;
        }
    }
    
    function main() {
        LogTrace('Starting');
        if (self.json)
            return jsonify(self.json);
        if (self.es5lint)
            return es5lint(self.es5lint);
        if (self.rootdir === '')
            self.rootdir=Info.scriptDir();
        debugger;
        var ext, fn = self.create;
        if (self.setup !== '')
            return setupApp(self.setup);
        if (fn === '') {
            var lst = File.glob('/zvfs/lib/*'), rc = [];
            for (var i of lst) {
                var ft = File.tail(i), fr = File.rootname(ft);
                ext = File.extension(ft);
                if (File.isdir(i) && File.exists(i+'/'+fr+'.jsi'))
                    rc.push(fr);
                else if (ext === '.jsi' && ft !== 'Jsish.jsi' && ft !=='autoload.jsi')
                    rc.push(fr);
            }
            throw 'missing required module name or builtin:\n    '+rc.sort().join(', ')+'\n';
        }
        ext = File.extension(fn);
        if (ext !== '.jsi')
            fn += '.jsi';
        if (self.output !== '')
            fn = self.output;
        if (File.exists(fn)) {
            if (!self.force)
                throw 'file exists: '+fn;
            File.remove(fn);
        }
        var pat = File.rootname(File.tail(fn));
        var pref = (self.web?'WebApp':'Module');
        var tmpl = File.read('/zvfs/lib/templates/'+pref+'.jsi');
        var re = new RegExp(pref,'g');
        tmpl = tmpl.replace(re, pat);
        File.write(fn, tmpl);
        File.chmod(fn, 0744);
        LogTrace('Done');
        if (!self.quiet)
            console.printf("Created module '%s' in %s\n", pat, fn);
    }
    
    return main();
}

module(Module);
