#!/usr/bin/env jsish

require('Jsish');
require('WebSocket', '2');

function Websrv(args:string|array, conf:object=void)
{
    var self = {
        chans   :{},
        css     :'',
        done    :false,
        mnt     :'',
        ssl     :false,
        sslcert :null,
        sslkey  :null,
        ws      :null,
        wsopts  :null,
        zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.
    };
    const options = { // Run a standalone web server, opening browser to serve out url.
        anchor      :'',        // Anchor after url.
        app         :'',        // An application directory.
        arc         :'',        // Archive/zip to mount
        arcOpts     :'',        // Archive options.
        arcVer      :'',        // Version to mount in fossil.
        browser     :'',        // The browser to exec, eg. "chrome-browser"
        closeTimeout:0,         // Time til exit after close of final client websocket (ms).
        confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).
        docs        :'',        // Display markdown docs from this directory.
        es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.
        hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.
        ignoreExit  :false,     // Ignore exit request.
        initArg     :[],        // List of app modules to run.
        isFile      :false,     // Url is a file, so throw if not exists.
        local       :true,      // Accept only local connections.
        mod         :'',        // Module string: menu, admin
        noCheck     :false,     // Disable function type-checking for .jsi files in browser.
        noGui       :false,     // Disable starting local browser.
        noReload    :false,     // Disable requesting hot-reload when files change.
        noWait      :false,     // Just return object: caller will provide an update() loop.
        onRecv      :null,      // Callback command to handle websocket msgs.
        pageStr     :'',        // String to serve out as url.
        port        :0,         // Start search for port.
        portMax     :999,       // Max times to increment-retry port if busy.
        query       :'',        // Query to append to url.
        rootdir     :null,      // Base directory.
        server      :false,     // Server mode: same as noGui=true and closeTimout=0
        sslDir      :null,      // Enable ssl and use certs in this dir.
        sslFnCert   :'cert.pem',// File name in sslDir of cert.
        sslFnKey    :'privkey.pem',// File name in sslDir of key.
        srcFile     :'',        // File of code to source inside the Websrv function.
        timeout     :59999,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.
        trace       :false,     // Tracing output.
        udata       :{},        // Shortcut add of udata to wsOpts.
        uploadDir   :'/tmp',    // Upload files go here
        url         :"",        // The file/url to serve out and clears timeout.
        urlPrefix   :'',        // Prefix for urls
        urlUnknown  :'',        // Url to redirect 404 to.
        urlFallback :'',        // File-url to serve out if page not found.
        useridPass  :'',        // USER:PASS for web GUI.
        vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir
        wsdebug     :0,         // Debug option for websockets.
        wsinc       :'',        // Name of file to include.
        wsOpts      :{},        // Websocket options.
    };

    moduleOpts(options, self);
    if (self.confFile != '')
        moduleOpts(options, self, JSON.parse(File.read(self.confFile)));
    
    function DoExit()   // Notify all going down, then exit.
    {
        if (self.ignoreExit) return;
        WsSend(-1, 'exit', {});
        setTimeout(function () {self.done = true; }, 1000); 
    }

    function CloseNow(ws:userobj)
    {
        self.closeId = null;
        if (ws.conf('stats.connectCnt')>0)
            return;
        LogTrace("Last client has closed");
        ws.conf({noUpdate:true});
        self.done = true;
    }
    
    function WsFilter(ws:userobj, id:number, url:string, ishttp:boolean)
    {
        LogTrace("FILTER:",url,ishttp);
        LogTrace('HDRS:',ws.header(id));
        LogTrace('ID:',ws.idconf(id));
        LogTrace('STATUS:',ws.status());
    }
    
    function WsOpen(ws:userobj, id:number)
    {
        LogTrace("Opening WS:",id);
    }
    
    function WsClose(ws:userobj|null, id:number, isError:boolean)
    {
        LogTrace("Closing WS:",id, isError);
    }
    
    function WsAuth(ws:userobj, id:number, url:string, userpass:string)
    {
        LogTrace("WsAuth:", id, url, userpass);
        // return (self.useridPass === userpass); // ie. return false to block page.
        return true;
    }
    
    function WsCloseLast(ws:userobj|null) // Wait around for a while for reconnect or new clients before exiting
    {
        LogTrace("Close last");
        if (self.timeout)
            return true;
        if (self.closeTimeout>0) {
            if (self.closeId)
                clearInterval(self.closeId);
            self.closeId = setTimeout(function () { CloseNow(ws); }, self.closeTimeout);
        }
        return true;
    }
    
    function wsSend(mod:string, id:number, cmd:string, obj:object, opts:object=void) {
        if (!opts) opts = {};
        var data = { mod:mod, cmd:cmd, data:obj, opts:opts };
        data = JSON.stringify(data);
        LogTrace("SENDING: "+data);
        self.ws.send(id, data);
    }
    
    function WsSend (id:number, cmd:string, obj:object, opts:object=void)
    {
        wsSend(self.mod, id, cmd, obj);
    }
    
    function InitData(id:number) {
        if (self.mod === 'menu') {
            return self.initArg;
        }
        var rv='', rids = self.ws.ids();
        LogTrace('RIDS: '+id+' '+rids.toString());
        for (var nid of rids) {
            var cv = self.ws.idconf(nid);
            var cur = (id === nid?' (CURRENT)':'');
            rv += '<H3> Conn #'+nid+cur+'</H3>'+tablifyObj(cv, true);
        }
        return rv;
    }
    
    function WsRecv(ws:userobj, id:number, data:string)
    {
        var msg;
        LogTrace("SERVER GOT:",id,":",data);
        var dat;
        if (self.onRecv) {
            LogTrace('Self');
            dat = JSON.parse(data);
            var ret = self.onRecv(ws, id, dat);
            if (ret) {
                if (typeof(ret) !== 'object' )
                    throw 'expected object';
                if (!ret.cmd)
                    ret.cmd = dat.cmd;
                var mod = (dat.mod?dat.mod:self.mod);
                var opts = (dat.opts?dat.opts:{});
                return wsSend(mod, id, dat.cmd, ret, opts);
            }
            return;
        }
        try {
            LogTrace("JSON: "+data.length);
            dat = JSON.parse(data);
            puts('DC',dat.cmd);
            switch (dat.cmd) {
                case 'start': // For apps, ignore it.
                    break;
                case 'init':
                    msg = InitData(id);
                    LogTrace("MSG:", msg);
                    WsSend(id, 'init', {data:msg});
                    break;
                case 'run':
                    var app = dat.data;
                    require(app);
                    var rv = moduleRun(app, []);
                    WsSend(id, 'run', rv?rv:{});
                    break;
                case 'save': 
                    var file = File.tail(dat.url)+'.save';
                    File.write(file, dat.data);
                    break;
                case 'process':     WsSend(id, 'process', {}); break;
                case 'exit':        DoExit(); break;
                    
                default: LogWarn("unknown cmd:", dat.cmd); break;
            }
        } catch (e) {
          LogWarn("ERROR:",e,data);
        }
        LogTrace("Done");
    }

    function WsUpload(ws:userobj, id:number, filename:string, data:string, startpos:number, complete:boolean)
    {
        LogTrace('QUERY:', self.ws.query(id));
        LogTrace('HDRS:', self.ws.header(id));
        LogTrace('POS='+startpos+' FN='+filename+' DATA:', data);
        
        if (!data.length && !startpos) {
            var fn = File.join(self.uploadDir, File.tail(filename));
            self.chans[id] = new Channel(fn, 'w+');
            return;
        }
        var chan = self.chans[id];
        chan.write(data);
        if (complete) {
            delete self.chans[id];
            return "Uploaded file: " + File.join(self.uploadDir, File.tail(filename));
        }
    }
    
    function OpenWebsock() {
        if (!self.port) {
            self.ws = new WebSocket(self.wsopts);
            self.wsopts.port = self.ws.conf('port');
            LogTrace("PORT IS:",self.wsopts.port);
            return true;
        }
        /* Try opening websocket on first available port. */
        var i;
        for (i=0; i<self.portMax; i++) {
            var err = null;
            try {
                self.ws = new WebSocket(self.wsopts);
                break;
            }
            catch (e) {
                if (e.indexOf("failed on port")<0)
                    err=e;
            }
            if (err)
                throw 'wsfail: '+err;
            self.wsopts.port++;
            LogTrace("ee:", err);
        }
        if (i>=self.portMax) {
            console.log("Failed to get port");
            return false;
        }
        LogTrace('STATUS:', self.ws.status());
        return true;
    }
    
    function mimeLookup(ws:userobj, id:number, extension:string, url:string) {
        ws.conf({mimeLookupFunc:null});
        if (!File.exists('/etc/mime.types')) return;
        var dat = File.read('/etc/mime.types').split('\n');
        var o = ws.conf('mimeTypes');
        if (!o) ws.conf({mimeTypes:o = {}});
        for (var i=0; i<dat.length; i++) {
            var l = dat[i];
            if (l[0] == '#') continue;
            l = l.trim().replace(/\s+/g,' ').split(' ');
            for (var j=1; j<l.length; l++)
                o[l[j]] = l[0];
        }
    }
    
    function OpenBrowser(url:string, anchor:string, query:string) {
        var prog = self.browser;
        var browsers = {
            unix: "xdg-open",
            win:  "start",
            mac:  "open"
        };
        if (!prog.length)
            prog = browsers[Info.platform().os];
        if (!prog)
            prog = "xdg-open";
        // Display page in browser.
        var eurl = self.urlPrefix + '/'+url;
        eurl = eurl.map(['//', '/']);
        var surl = ' '+(self.ssl?'https':'http')+'://127.0.0.1:'+self.wsopts.port+eurl;
        if (query)
            surl += '?'+ query.replace(/&/g,'\\&');
        if (anchor)
            surl += '#'+ anchor;
        LogTrace("URL:",surl);
        exec(prog + surl +" &");
    }


    self.css = "<STYLE>" +
        "table.cmdstbl { background-color: #f5f5f5; border-collapse: collapse; padding: 3px; }"+
        "table.cmdstbl th { background-color: #558195; color: #FFFFFF; padding: 3px; }"+
        "table.cmdstbl td { padding: 3px; }"+
        "table.cmdstbl td:first-child { font-weight: bold; }"+
        "</STYLE>";

    function tablifyObj(cv:object, all:boolean=false) {
        var rv = '<TR><TH>Name</TH><TH>Value</TH></TR>';
        for (var i in cv) {
            rv += '<TR><TD>'+i+'</TD><TD>'+JSON.stringify(cv[i])+'</TD></TR>';
        }
        if (all)
            rv = '<TABLE border=1 class=cmdstbl>'+rv+'</TABLE>';
        return rv;        
    }
    
    function WebGetString(ws:userobj, id:number, url:string, query:array) {
        return self.pageStr;
    }
    
    function onModify(ws:userobj, fname:string) {
        LogDebug("onModify", fname);
        setTimeout(function() { wsSend('!', -1, 'reload', {fname:fname}); }, 300);
    }

    function WebAdmin(ws:userobj, id:number, url:string, query:array) {
        LogTrace('url', url);
        if (self.pageStr !== '')
            return self.pageStr;
        var cv = ws.conf();
        var rv = '<HEAD>'+self.css+'</HEAD>' + tablifyObj(cv, true);
        var rids = ws.ids();
        LogTrace('RIDS: '+id+' '+rids.toString());
        for (var nid of rids) {
            cv = ws.idconf(nid);
            var cur = (id === nid?' (CURRENT)':'');
            rv += '<H3> Conn #'+nid+cur+'</H3>'+tablifyObj(cv, true);
        }
        return "<H2>Websrv Admin</H2>"+rv;
    }
    
    /*function WebMenu(ws:userobj, id:number, url:string, query:array) {
        return File.read('/zvfs/lib/www/wsMenu.htmli');
    }*/
    
    // url = getUrlInDir(self.mnt)
    function getUrlInDir(indir:string, depth=1) {
        var flst;
        for (var fext of ['.htmli','.html']) {
            flst = File.glob('*'+fext, {dir:indir});
            if (flst.length === 1)
                return flst[0];
        }
        if (depth>0) {
            flst = File.glob('*', {dir:indir, types:'d'});
            if (flst.length === 1)
                return getUrlInDir(indir+'/'+flst[0], depth-1);
        }
        return '';
    }
    
    function DoTimeout() {
        if (self.timeout>0) {
            var lt=self.ws.conf('stats.eventLast'), last = strptime(lt), now = strptime(), dif=(now-last);
            LogTrace('lt',lt,'last',last, strftime(now), 'now',now, 'dif',dif);
            if (last && dif<self.timeout) {
                setTimeout(function () { DoTimeout(); }, (self.timeout-(dif<0?dif:0)));
                return;
            }
        }
        self.done = true;
    }
    
    function archiveMnt(name:string) {
        return Archive([name], {noRun:true, version:self.arcVer});
    }
    
    function ConvertVue(fn:string) { // Now builtin.
        // Simple conversion of .vue file to js module.
        var s = File.read(fn);
        var ts = s.indexOf('<template>');
        var te = s.lastIndexOf('\n</template>');
        var sxs = '<script>\nexport default {';
        var sx = s.indexOf(sxs);
        var se = s.lastIndexOf('\n</script>');
        if (ts<0||te<0||se<0||sx<0) puts('bad template:',fn);
        var tmpl = s.substr(ts+10, te-ts-9);
        var sxb = sx+sxs.length;
        var scr = s.substr(sxb, se-sxb);
        var out = s.substr(0, ts)+'let template=`' + tmpl + '`;\n\nexport default {\n  template, '+scr + s.substr(se+10);
        return out;
    }
    
    function vueConvAll(args:array) {
        for (var f of args) {
            var fb = File.rootname(f);
            if (File.extension(f) !== '.vue')
                throw 'file extension must be .vue'+f;
            var to = fb+'.js';
            if (self.rootdir)
                to = File.join(self.rootdir, File.tail(to));
            var out = ConvertVue(f);
            File.write(to, out);
        }
    }
    
    function es5lint() {
        var d = self.es5lint;
        var i, lst;
        if (File.isdir(d))
            lst = File.glob('*.js', {dir:d, recurse:true});
        else
            lst = [d];
        for (i of lst) {
            var int = new Interp({noEval:true, noES6:true, scriptFile:i});
            delete int;
        }
    }
    
    if (self.es5lint)
        return es5lint();
        
    if (self.srcFile !== '')
        source(self.srcFile);

    var pal=null, urlarg, urlOrig = self.url;
    if (typeof args === 'string')
        args = [args];
    if (self.vueConvert) {
        return vueConvAll(args);
    }
    urlarg = args[0];
    args.shift();
    if (urlarg) {
        var fext = File.extension(urlarg);
        var zexts = ['.zip', '.sqlar', '.fossil'];
        if (zexts.indexOf(fext)>=0) {
            self.zip = urlarg;
            urlarg = args[0];
            args.shift();
        }
    }
    if (urlarg) {
        if (self.url)
            throw 'can not have args and specify -url';
        var iiq;
        if (self.query === '' && (iiq=urlarg.indexOf('?'))>0) {
            self.query = urlarg.substr(iiq+1);
            urlarg = urlarg.substr(0, iiq);
        }
        self.url = urlarg;
    }
    if (self.app) {
        if (!self.rootdir)
            self.rootdir = '/zvfs/lib/www';
        if (!self.url)
            self.url = 'index.html';
        var apd = self.app, ard = self.rootdir, apu = self.url;
        if (self.arc) {
            self.mnt = archiveMnt(self.arc);
            puts("MM:", self.mnt);
            apd = File.join(self.mnt, apd);
        }
       // if (File.tail(apd) == 'app.js')
       //     apd = File.dirname(apd);
        if (!File.exists(apd+'/app.js'))
            throw 'app file not found: '+apd+'/app.js';
        pal = {app:apd};
        if (File.exists(apd+'/'+apu)) { // Use /app/index.html
            LogInfo("USE APP INDEX:", apu);
            self.url = '/app/'+apu;
        }
        else if (File.exists(ard+'/'+apu)) { // Use /index.html
            LogInfo("USE BUILTIN INDEX:", apu);
        } else {
            throw 'index file not found: '+apu;
            /*LogInfo("NOT USING BI");
            apd = self.rootdir+'/'+self.app;
            var uad = apd+'/'+self.url;
            if (!File.exists(uad))
                throw 'index file not found: '+uad;
            pal = {app:apd};*/
        }
        if (!self.wsinc) {
            self.wsinc = pal.app+'/wsinc.jsi';
            if (!File.exists(self.wsinc))
                self.wsinc = '';
        }
    } if (self.docs) {
        if (self.rootdir || self.zip)
            throw 'can not use rootdir/zip with docs';
        var surl = self.url = 'docs/index.html', sd = self.docs;
        self.rootdir = '/zvfs/lib/www';
        if (self.arc) {
            self.mnt = archiveMnt(self.arc);
            sd = File.join(self.mnt, sd);
        }
        if (sd != '/') {
            if (File.exists(sd+'/'+surl))
                self.rootdir = sd;
            else if (File.exists(sd+'/../'+surl))
                self.rootdir = sd+'/../';
            else if (!File.isdir(sd))
                throw 'docs directory does not exists:'+ sd;
            else
                pal = {md:sd};
            if (File.glob('*.md', {retCount:true, dir:sd})<=0)
                throw 'docs directory does not contain .md files:'+ sd;            
            if (!File.exists(sd+'/index.json'))
                LogWarn(sd+'/index.json not found');
        }
        if (!self.wsinc) {
            self.wsinc = self.rootdir+'/docs/wsinc.jsi';
            if (!File.exists(self.wsinc))
                self.wsinc = '';
        }            
    } else if (self.zip) {
        self.mnt = archiveMnt(self.zip);
        if (!self.rootdir)
            self.rootdir = self.mnt;
        else
            self.rootdir = self.mnt + '/' + self.rootdir;
        if (!self.url)
            self.url = getUrlInDir(self.mnt);

    } else if (!self.rootdir) {
        if (!self.url.length)
            self.rootdir = Info.scriptDir();
        else
            self.rootdir = File.dirname(self.url);
        var rlen = self.rootdir.length;
        if (self.url.substr(0, rlen) === self.rootdir)
            self.url = self.url.substr(rlen);
    }
    if (self.sslDir) {
        if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);
        if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);
        self.ssl = true;
    }
    if (!self.rootdir)
        self.rootdir = '.';
    if (self.hist && !self.urlFallback)
        self.urlFallback = self.url;

    // Provide default values for websocket.
    var wopts = self.wsopts = {
        pathAlias:pal,
        local:self.local,
        debug:self.wsdebug,
        extHandlers:true,
        onOpen:WsOpen,
        onClose:WsClose,
        onCloseLast:WsCloseLast,
        onRecv:WsRecv,
        onUpload:WsUpload,
        onFilter:WsFilter,
        port:self.port,
        rootdir:self.rootdir,
        urlPrefix:(self.urlPrefix?self.urlPrefix:null),
        urlUnknown:(self.urlUnknown?self.urlUnknown:null),
        urlFallback:(self.urlFallback?self.urlFallback:null),
        sslCert:self.sslcert,
        sslKey:self.sslkey,
        ssl:self.ssl,
        mimeLookupFunc:mimeLookup,
    };
    switch (self.mod) {
        case 'admin':
            self.url = '/admin';
            wopts.getRegexp=/^\/admin/;
            wopts.onGet=WebAdmin;
            break;
        case 'menu':
            self.url = '/jsi/Websrv.htmli';
            break;
        case '': break;
        default:
            if (!self.app && !self.docs)
                throw 'mod "'+self.mod+'" not one of: admin, menu';
    }
    if (urlOrig!=='' && self.timeout === options.timeout)
        self.timeout = 0;
    if (!self.app && !self.docs && !self.server && !self.pageStr && self.mod === '' && urlOrig=='' && (!self.url || !File.exists(self.rootdir+'/'+self.url)))
        throw "url file empty or not found: "+self.url;
    if (self.urlPrefix.length && self.urlPrefix[0] != '/')
        throw 'urlPrefix must start with a slash';
    
    if (self.local)
        wopts.noCompress = true;
    if (self.server) {
        self.noGui = true;
        if (self.timeout == options.timeout)
            self.timeout = 0;
    } else if (!self.noReload)
        wopts.onModify = onModify;
    if (self.pageStr !== '') {
        wopts.getRegexp=/^\/page/;
        self.url = '/page';
        wopts.onGet=WebGetString;
    }
    if (self.useridPass != '') {
        wopts.useridPass = self.useridPass;
        if (self.useridPass === ':') // Exercise onAuth callback.
            wopts.onAuth = WsAuth;
    }
    if (typeof self.wsOpts === 'string')
        self.wsOpts = JSON.parse(self.wsOpts, false);
    if (typeof self.udata === 'string')
        self.udata = JSON.parse(self.udata, false);
    if (self.udata && self.udata.length)
        self.wsOpts.udata = self.udata;
    for (var i in self.wsOpts)
        wopts[i] = self.wsOpts[i];

    if (self.wsinc)
        source(self.wsinc);
    OpenWebsock();
   // if (!self.ws.conf('extHandlers'))
    //    self.ws.handler('vue', ConvertVue); // VUE BUILTIN NOW
    LogTrace("Listening on port:",wsopts.port);
    
    if (!self.noGui && self.url && self.url.length) {
        OpenBrowser(self.url, self.anchor, self.query);
    }

    if (self.noWait) {
        self.openWebsock = OpenWebsock;
        return self;
    }

    if (self.timeout)
        setTimeout(function () { DoTimeout(); }, self.timeout<0?-self.timeout:self.timeout);
    while (!self.done && Event.update(100) ) ;
    
}

module(Websrv, '1.2.3', {nofreeze:false, logmask:'debug,trace'});
